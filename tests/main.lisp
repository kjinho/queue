(in-package #:queue-tests)

(plan 5)

(subtest "Testing enqueue!, dequeue!, and q-length"
  (let ((q (make-instance 'queue:queue :size 4 :type 'integer)))
    (is (queue:q-length q) 0)
    (ok (queue:enqueue! q 1))
    (ok (queue:enqueue! q 2))
    (is (queue:q-length q) 2)
    (is (queue:dequeue! q) 1)
    (is (queue:dequeue! q) 2)
    (ok (queue:enqueue! q 3))
    (ok (queue:enqueue! q 4))
    (ok (queue:enqueue! q 5))
    (ok (queue:enqueue! q 6))
    (is-error (queue:enqueue! q 100) 'simple-error)
    (is (queue:q-length q) 4)
    (is (queue:dequeue! q) 3)
    (is (queue:q-length q) 3)
    (ok (queue:enqueue! q 7))
    (is (queue:dequeue! q) 4)
    (is (queue:dequeue! q) 5)
    (is (queue:dequeue! q) 6)
    (is (queue:dequeue! q) 7)
    (is (queue:q-length q) 0)
    (is-error (queue:dequeue! q) 'simple-error)
    (is (queue:q-length q) 0)
    (ok (queue:enqueue! q 8))
    (ok (queue:enqueue! q 9))
    (ok (queue:enqueue! q 10))
    (ok (queue:enqueue! q 11))
    (is (queue:q-length q) 4)
    (is (queue:dequeue! q) 8)
    (is (queue:dequeue! q) 9)
    (is (queue:dequeue! q) 10)
    (is (queue:dequeue! q) 11)
    (is (queue:q-length q) 0)))

(subtest "Test making a list"
  (let ((q (make-instance 'queue:queue :size 3 :type 'integer)))
    (is (queue:queue->list q) '())
    (ok (queue:enqueue! q 1))
    (ok (queue:enqueue! q 2))
    (ok (queue:enqueue! q 3))
    (is (queue:queue->list q) '(1 2 3))
    (is (queue:dequeue! q) 1)
    (is (queue:dequeue! q) 2)
    (is (queue:queue->list q) '(3))
    (ok (queue:enqueue! q 4))
    (is (queue:queue->list q) '(3 4))
    (ok (queue:enqueue! q 5))
    (is (queue:queue->list q) '(3 4 5))
    (is (queue:dequeue! q) 3)
    (is (queue:queue->list q) '(4 5))
    (ok (queue:enqueue! q 6))
    (is (queue:queue->list q) '(4 5 6))))
        
(subtest
 "Test math-queue"
 (let ((q (make-instance 'queue:math-queue :size 3 :type 'integer)))
   (is (queue:sum q) 0)
   (ok (queue:enqueue! q 1))
   (is (queue:sum q) 1)
   (is (queue:dequeue! q) 1)
   (is-error (queue:dequeue! q) 'simple-error)
   (is (queue:sum q) 0)
   (ok (queue:enqueue! q 2))
   (ok (queue:enqueue! q 3))
   (ok (queue:enqueue! q 4))
   (is-error (queue:enqueue! q 5) 'simple-error)
   (is (queue:sum q) 9)
   (is (queue:dequeue! q) 2)
   (is (queue:sum q) 7)
   (is (queue:queue->list q) '(3 4))))
           

(subtest
 "test reduce"
 (let ((q (make-instance 'queue:queue :size 4 :type 'integer)))
   (queue:enqueue! q 3)
   (queue:enqueue! q 4)
   (is (queue:q-reduce #'+ q) 7)
   (is (queue:q-reduce #'+ q :initial-value 10) 17)
   (is (queue:q-reduce (lambda (a x) (cons x a))
                       q
                       :initial-value '())
       '(4 3) :test #'equalp)
   (is (queue:q-reduce #'* q :initial-value :none) 12)
   ))

(defun nearlyequal (precision)
  (lambda (x y)
    (or (and (null x) (null y))
        (and (numberp x) (numberp y)
             (let ((x1 (round (* x (expt 10 precision))))
                   (y1 (round (* y (expt 10 precision)))))
               (= x1 y1))))))

(subtest
 "test q-max, q-min, stdev"
 (let ((q (make-instance 'queue:math-queue :size 5 :type 'float)))
   (queue:enqueue! q 1)
   (queue:enqueue! q 2)
   (queue:enqueue! q 3)
   (queue:enqueue! q 4)
   (queue:enqueue! q 5)
   (is (queue:q-max q) 5 :test #'=)
   (is (queue:q-min q) 1 :test #'=)
   (is (queue:stdev q) 1.5811 :test (nearlyequal 3))
   (queue:dequeue! q)
   (queue:enqueue! q 0)
   (is (queue:q-max q) 5 :test #'=)
   (is (queue:q-min q) 0 :test #'=)
   ))


(finalize)
